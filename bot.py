import os
import logging
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, 
    ContextTypes, ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8377876772:AAF5-fmyqvVyzCOVALSNiytd_MiJBcTbSow"

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
TABEL_NUMBER, MAIN_MENU, SIZ_SEASON, SIZ_SELECTION, VIOLATION_REPORT = range(5)
DB_NAME = "siz_bot.db"

def init_database():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            tabel_number TEXT UNIQUE,
            full_name TEXT,
            position TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS siz_orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            tabel_number TEXT,
            season TEXT,
            siz_item TEXT,
            quantity INTEGER,
            order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS violations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            reporter_tabel TEXT,
            violation_type TEXT,
            description TEXT,
            is_anonymous BOOLEAN DEFAULT 1,
            report_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –°–ò–ó
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS siz_catalog (
            position TEXT,
            season TEXT,
            siz_item TEXT,
            standard_quantity INTEGER
        )
    ''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute("SELECT COUNT(*) FROM siz_catalog")
    if cursor.fetchone()[0] == 0:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        siz_data = [
            ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–õ–µ—Ç–Ω–∏–π', '–ö–∞—Å–∫–∞ –∑–∞—â–∏—Ç–Ω–∞—è', 1),
            ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–õ–µ—Ç–Ω–∏–π', '–ü–µ—Ä—á–∞—Ç–∫–∏ –¥–∏—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ', 2),
            ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–õ–µ—Ç–Ω–∏–π', '–û—á–∫–∏ –∑–∞—â–∏—Ç–Ω—ã–µ', 1),
            ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–ó–∏–º–Ω–∏–π', '–£—Ç–µ–ø–ª–µ–Ω–Ω–∞—è –∫—É—Ä—Ç–∫–∞', 1),
            ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–ó–∏–º–Ω–∏–π', '–£—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏', 1),
        ]
        cursor.executemany(
            "INSERT INTO siz_catalog (position, season, siz_item, standard_quantity) VALUES (?, ?, ?, ?)",
            siz_data
        )
    
    conn.commit()
    conn.close()

def get_siz_items(season):
    """–ü–æ–ª—É—á–∏—Ç—å –°–ò–ó –¥–ª—è —Å–µ–∑–æ–Ω–∞"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT siz_item, standard_quantity FROM siz_catalog WHERE season = ?",
        (season,)
    )
    items = cursor.fetchall()
    conn.close()
    return items

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:",
        reply_markup=ReplyKeyboardRemove()
    )
    return TABEL_NUMBER

async def handle_tabel_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tabel_number = update.message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if len(tabel_number) < 2:
        await update.message.reply_text("–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return TABEL_NUMBER
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, tabel_number, full_name, position) VALUES (?, ?, ?, ?)",
        (user.id, tabel_number, f"{user.first_name} {user.last_name or ''}", "–≠–ª–µ–∫—Ç—Ä–∏–∫")
    )
    conn.commit()
    conn.close()
    
    context.user_data['tabel_number'] = tabel_number
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        ['üõ°Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –°–ò–ó'],
        ['üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä {tabel_number} –ø—Ä–∏–Ω—è—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    tabel_number = context.user_data.get('tabel_number')
    
    if text == 'üõ°Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –°–ò–ó':
        keyboard = [['–õ–µ—Ç–Ω–∏–π', '–ó–∏–º–Ω–∏–π'], ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –°–ò–ó:", reply_markup=reply_markup)
        return SIZ_SEASON
        
    elif text == 'üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏':
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏:\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
        )
        return VIOLATION_REPORT
        
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π':
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –ù–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "SELECT COUNT(*) FROM violations WHERE reporter_tabel = ?",
            (tabel_number,)
        )
        user_violations = cursor.fetchone()[0]
        
        # –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π
        cursor.execute("SELECT COUNT(*) FROM violations")
        total_violations = cursor.fetchone()[0]
        
        conn.close()
        
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π\n\n"
            f"–í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_violations}\n"
            f"–í–∞–º–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {user_violations}"
        )
        
        await update.message.reply_text(stats_text)
        return MAIN_MENU

async def siz_season(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return await back_to_main(update, context)
    
    context.user_data['season'] = text
    
    # –ü–æ–ª—É—á–∞–µ–º –°–ò–ó –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞
    siz_items = get_siz_items(text)
    
    if not siz_items:
        await update.message.reply_text("–î–ª—è —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –°–ò–ó –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return await back_to_main(update, context)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –°–ò–ó
    keyboard = []
    for item, quantity in siz_items:
        keyboard.append([f"{item} ({quantity} —à—Ç)"])
    keyboard.append(['‚Ü©Ô∏è –ù–∞–∑–∞–¥'])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –°–ò–ó –¥–ª—è {text} —Å–µ–∑–æ–Ω–∞:",
        reply_markup=reply_markup
    )
    return SIZ_SELECTION

async def siz_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return await back_to_main(update, context)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –°–ò–ó
    siz_name = text.split(' (')[0]
    season = context.user_data.get('season')
    tabel_number = context.user_data.get('tabel_number')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO siz_orders (user_id, tabel_number, season, siz_item, quantity) VALUES (?, ?, ?, ?, ?)",
        (update.effective_user.id, tabel_number, season, siz_name, 1)
    )
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"–°–ò–ó: {siz_name}\n"
        f"–°–µ–∑–æ–Ω: {season}\n"
        f"–¢–∞–±–µ–ª—å–Ω—ã–π: {tabel_number}\n\n"
        f"–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ—Ç–¥–µ–ª —Å–Ω–∞–±–∂–µ–Ω–∏—è."
    )
    return await back_to_main(update, context)

async def violation_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞':
        return await back_to_main(update, context)
    
    violation_description = text
    tabel_number = context.user_data.get('tabel_number')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO violations (reporter_tabel, violation_type, description) VALUES (?, ?, ?)",
        (tabel_number, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", violation_description)
    )
    conn.commit()
    conn.close()
    
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")
    return await back_to_main(update, context)

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üõ°Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –°–ò–ó'],
        ['üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            TABEL_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_tabel_number)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            SIZ_SEASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, siz_season)],
            SIZ_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, siz_selection)],
            VIOLATION_REPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, violation_report)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –°–ò–ó —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("üìç –¢–æ–∫–µ–Ω: 8377876772:AAF5-fmyqvVyzCOVALSNiytd_MiJBcTbSow")
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()