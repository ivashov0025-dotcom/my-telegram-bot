import logging
import sqlite3
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, 
    ContextTypes, ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
TABEL_NUMBER, MAIN_MENU, SIZ_SEASON, SIZ_SELECTION, VIOLATION_REPORT = range(5)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "siz_bot.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            tabel_number TEXT UNIQUE,
            full_name TEXT,
            position TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –°–ò–ó
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS siz_orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            tabel_number TEXT,
            season TEXT,
            siz_item TEXT,
            quantity INTEGER,
            order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS violations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            reporter_tabel TEXT,
            violation_type TEXT,
            description TEXT,
            location TEXT,
            is_anonymous BOOLEAN DEFAULT 1,
            report_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ò–ó –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS siz_catalog (
            position TEXT,
            season TEXT,
            siz_item TEXT,
            standard_quantity INTEGER
        )
    ''')
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ò–ó (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    siz_data = [
        ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–ª–µ—Ç–Ω–∏–π', '–ö–∞—Å–∫–∞ –∑–∞—â–∏—Ç–Ω–∞—è', 1),
        ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–ª–µ—Ç–Ω–∏–π', '–ü–µ—Ä—á–∞—Ç–∫–∏ –¥–∏—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ', 2),
        ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–ª–µ—Ç–Ω–∏–π', '–û—á–∫–∏ –∑–∞—â–∏—Ç–Ω—ã–µ', 1),
        ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–∑–∏–º–Ω–∏–π', '–£—Ç–µ–ø–ª–µ–Ω–Ω–∞—è –∫—É—Ä–∫–∞', 1),
        ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–∑–∏–º–Ω–∏–π', '–£—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏', 1),
        ('–°–≤–∞—Ä—â–∏–∫', '–ª–µ—Ç–Ω–∏–π', '–ú–∞—Å–∫–∞ —Å–≤–∞—Ä—â–∏–∫–∞', 1),
        ('–°–≤–∞—Ä—â–∏–∫', '–ª–µ—Ç–Ω–∏–π', '–ö—Ä–∞–≥–∏', 2),
        ('–°–≤–∞—Ä—â–∏–∫', '–ª–µ—Ç–Ω–∏–π', '–°–ø–µ—Ü–∫–æ—Å—Ç—é–º', 1),
        ('–°–≤–∞—Ä—â–∏–∫', '–∑–∏–º–Ω–∏–π', '–£—Ç–µ–ø–ª–µ–Ω–Ω—ã–π —Å–ø–µ—Ü–∫–æ—Å—Ç—é–º', 1),
        ('–°–≤–∞—Ä—â–∏–∫', '–∑–∏–º–Ω–∏–π', '–£—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏', 2),
        ('–°–ª–µ—Å–∞—Ä—å', '–ª–µ—Ç–Ω–∏–π', '–ö–æ–º–±–∏–Ω–µ–∑–æ–Ω', 1),
        ('–°–ª–µ—Å–∞—Ä—å', '–ª–µ—Ç–Ω–∏–π', '–ü–µ—Ä—á–∞—Ç–∫–∏', 4),
        ('–°–ª–µ—Å–∞—Ä—å', '–∑–∏–º–Ω–∏–π', '–£—Ç–µ–ø–ª–µ–Ω–Ω—ã–π –∫–æ–º–±–∏–Ω–µ–∑–æ–Ω', 1),
        ('–°–ª–µ—Å–∞—Ä—å', '–∑–∏–º–Ω–∏–π', '–£—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏', 4)
    ]
    
    cursor.execute("SELECT COUNT(*) FROM siz_catalog")
    if cursor.fetchone()[0] == 0:
        cursor.executemany(
            "INSERT INTO siz_catalog (position, season, siz_item, standard_quantity) VALUES (?, ?, ?, ?)",
            siz_data
        )
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
def get_siz_for_position(position, season):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT siz_item, standard_quantity FROM siz_catalog WHERE position = ? AND season = ?",
        (position, season)
    )
    
    result = cursor.fetchall()
    conn.close()
    return result

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(user_id, tabel_number, full_name, position):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, tabel_number, full_name, position)
        VALUES (?, ?, ?, ?)
    ''', (user_id, tabel_number, full_name, position))
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∞–±–µ–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
def get_user_by_tabel(tabel_number):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM users WHERE tabel_number = ?", (tabel_number,))
    result = cursor.fetchone()
    conn.close()
    
    return result

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –°–ò–ó
def save_siz_order(user_id, tabel_number, season, siz_item, quantity):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO siz_orders (user_id, tabel_number, season, siz_item, quantity)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, tabel_number, season, siz_item, quantity))
    
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
def save_violation(reporter_tabel, violation_type, description, location, is_anonymous=True):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO violations (reporter_tabel, violation_type, description, location, is_anonymous)
        VALUES (?, ?, ?, ?, ?)
    ''', (reporter_tabel, violation_type, description, location, is_anonymous))
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
def get_violation_stats(tabel_number):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # –ù–∞—Ä—É—à–µ–Ω–∏—è, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    cursor.execute('''
        SELECT violation_type, COUNT(*) as count 
        FROM violations 
        WHERE reporter_tabel = ? 
        GROUP BY violation_type
    ''', (tabel_number,))
    
    reported_violations = cursor.fetchall()
    
    # –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ
    cursor.execute("SELECT COUNT(*) FROM violations")
    total_violations = cursor.fetchone()[0]
    
    conn.close()
    
    return reported_violations, total_violations

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return TABEL_NUMBER

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
async def handle_tabel_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tabel_number = update.message.text.strip()
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ - –ø—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è
    if len(tabel_number) < 3:
        await update.message.reply_text("–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return TABEL_NUMBER
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
    user = update.effective_user
    save_user(user.id, tabel_number, f"{user.first_name} {user.last_name or ''}", "–≠–ª–µ–∫—Ç—Ä–∏–∫")
    
    context.user_data['tabel_number'] = tabel_number
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        ['üõ°Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –°–ò–ó'],
        ['üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä {tabel_number} –ø—Ä–∏–Ω—è—Ç!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    
    return MAIN_MENU

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    tabel_number = context.user_data.get('tabel_number')
    
    if text == 'üõ°Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –°–ò–ó':
        keyboard = [['–õ–µ—Ç–Ω–∏–π –°–ò–ó', '–ó–∏–º–Ω–∏–π –°–ò–ó'], ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –°–ò–ó:",
            reply_markup=reply_markup
        )
        return SIZ_SEASON
        
    elif text == 'üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ':
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏:\n\n"
            "–£–∫–∞–∂–∏—Ç–µ:\n"
            "‚Ä¢ –¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è\n"
            "‚Ä¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
        )
        return VIOLATION_REPORT
        
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π':
        reported_violations, total_violations = get_violation_stats(tabel_number)
        
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π\n\n"
        stats_text += f"–í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_violations}\n\n"
        
        if reported_violations:
            stats_text += "–í–∞–º–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ:\n"
            for violation_type, count in reported_violations:
                stats_text += f"‚Ä¢ {violation_type}: {count}\n"
        else:
            stats_text += "–í—ã –µ—â–µ –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π"
        
        await update.message.reply_text(stats_text)
        return MAIN_MENU

# –í—ã–±–æ—Ä —Å–µ–∑–æ–Ω–∞ –°–ò–ó
async def siz_season(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return await back_to_main(update, context)
    
    season = "–ª–µ—Ç–Ω–∏–π" if "–õ–µ—Ç–Ω–∏–π" in text else "–∑–∏–º–Ω–∏–π"
    context.user_data['selected_season'] = season
    
    # –ü–æ–ª—É—á–∞–µ–º –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_position = "–≠–ª–µ–∫—Ç—Ä–∏–∫"  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –±—Ä–∞—Ç—å –∏–∑ –±–∞–∑—ã
    siz_items = get_siz_for_position(user_position, season)
    
    if not siz_items:
        await update.message.reply_text("–î–ª—è –≤–∞—à–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –°–ò–ó –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return await back_to_main(update, context)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –°–ò–ó –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['siz_items'] = siz_items
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –°–ò–ó
    keyboard = []
    for item, quantity in siz_items:
        keyboard.append([f"{item} (–Ω–æ—Ä–º–∞: {quantity} —à—Ç.)"])
    keyboard.append(['‚Ü©Ô∏è –ù–∞–∑–∞–¥'])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –°–ò–ó –¥–ª—è {season} —Å–µ–∑–æ–Ω–∞:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=reply_markup
    )
    
    return SIZ_SELECTION

# –í—ã–±–æ—Ä –°–ò–ó –¥–ª—è –∑–∞–∫–∞–∑–∞
async def siz_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return await back_to_main(update, context)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –°–ò–ó –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    siz_name = text.split(' (–Ω–æ—Ä–º–∞:')[0]
    season = context.user_data.get('selected_season')
    tabel_number = context.user_data.get('tabel_number')
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    siz_items = context.user_data.get('siz_items', [])
    quantity = 1
    for item, std_quantity in siz_items:
        if item == siz_name:
            quantity = std_quantity
            break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    save_siz_order(update.effective_user.id, tabel_number, season, siz_name, quantity)
    
    await update.message.reply_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"–°–ò–ó: {siz_name}\n"
        f"–°–µ–∑–æ–Ω: {season}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        f"–¢–∞–±–µ–ª—å–Ω—ã–π: {tabel_number}\n\n"
        f"–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ—Ç–¥–µ–ª —Å–Ω–∞–±–∂–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardMarkup([['üõ°Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –°–ò–ó', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'], ['‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
    )
    
    return MAIN_MENU

# –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
async def violation_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞':
        return await back_to_main(update, context)
    
    violation_description = text
    tabel_number = context.user_data.get('tabel_number')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ (–∞–Ω–æ–Ω–∏–º–Ω–æ)
    save_violation(
        reporter_tabel=tabel_number,
        violation_type="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        description=violation_description,
        location="–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        is_anonymous=True
    )
    
    await update.message.reply_text(
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.",
        reply_markup=ReplyKeyboardMarkup([
            ['üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
            ['‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ], resize_keyboard=True)
    )
    
    return MAIN_MENU

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üõ°Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –°–ò–ó'],
        ['üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_markup
    )
    
    return MAIN_MENU

# –û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token("8377876772:AAF5-fmyqvVyzCOVALSNiytd_MiJBcTbSow").build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            TABEL_NUMBER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_tabel_number)
            ],
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)
            ],
            SIZ_SEASON: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, siz_season)
            ],
            SIZ_SELECTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, siz_selection)
            ],
            VIOLATION_REPORT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, violation_report)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –°–ò–ó –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()