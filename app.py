import os
import logging
import sqlite3
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –°–ò–ó —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–æ–∫–µ–Ω: 8377876772:AAF5-fmyqvVyzCOVALSNiytd_MiJBcTbSow"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8377876772:AAF5-fmyqvVyzCOVALSNiytd_MiJBcTbSow"

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
TABEL_NUMBER, MAIN_MENU, SIZ_SEASON, SIZ_SELECTION, VIOLATION_REPORT = range(5)
DB_NAME = "siz_bot.db"

def init_database():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        tabel_number TEXT UNIQUE,
        full_name TEXT,
        position TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS siz_orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        tabel_number TEXT,
        season TEXT,
        siz_item TEXT,
        quantity INTEGER,
        order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS violations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        reporter_tabel TEXT,
        violation_type TEXT,
        description TEXT,
        is_anonymous BOOLEAN DEFAULT 1,
        report_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS siz_catalog (
        position TEXT,
        season TEXT,
        siz_item TEXT,
        standard_quantity INTEGER
    )''')
    
    cursor.execute("SELECT COUNT(*) FROM siz_catalog")
    if cursor.fetchone()[0] == 0:
        siz_data = [
            ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–õ–µ—Ç–Ω–∏–π', '–ö–∞—Å–∫–∞ –∑–∞—â–∏—Ç–Ω–∞—è', 1),
            ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–õ–µ—Ç–Ω–∏–π', '–ü–µ—Ä—á–∞—Ç–∫–∏ –¥–∏—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ', 2),
            ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–õ–µ—Ç–Ω–∏–π', '–û—á–∫–∏ –∑–∞—â–∏—Ç–Ω—ã–µ', 1),
            ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–ó–∏–º–Ω–∏–π', '–£—Ç–µ–ø–ª–µ–Ω–Ω–∞—è –∫—É—Ä—Ç–∫–∞', 1),
            ('–≠–ª–µ–∫—Ç—Ä–∏–∫', '–ó–∏–º–Ω–∏–π', '–£—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏', 1),
        ]
        cursor.executemany("INSERT INTO siz_catalog VALUES (?, ?, ?, ?)", siz_data)
    
    conn.commit()
    conn.close()

def get_siz_items(season):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT siz_item, standard_quantity FROM siz_catalog WHERE season = ?", (season,))
    items = cursor.fetchall()
    conn.close()
    return items

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:")
    return TABEL_NUMBER

async def handle_tabel_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tabel_number = update.message.text.strip()
    
    if len(tabel_number) < 2:
        await update.message.reply_text("–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return TABEL_NUMBER
    
    user = update.effective_user
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO users (user_id, tabel_number, full_name, position) VALUES (?, ?, ?, ?)",
                  (user.id, tabel_number, f"{user.first_name}", "–≠–ª–µ–∫—Ç—Ä–∏–∫"))
    conn.commit()
    conn.close()
    
    context.user_data['tabel_number'] = tabel_number
    
    keyboard = [['üõ°Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –°–ò–ó'], ['üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏'], ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(f"–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä {tabel_number} –ø—Ä–∏–Ω—è—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == 'üõ°Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –°–ò–ó':
        keyboard = [['–õ–µ—Ç–Ω–∏–π', '–ó–∏–º–Ω–∏–π'], ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –°–ò–ó:", reply_markup=reply_markup)
        return SIZ_SEASON
        
    elif text == 'üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏':
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ (–∞–Ω–æ–Ω–∏–º–Ω–æ):", reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞']], resize_keyboard=True))
        return VIOLATION_REPORT
        
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π':
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM violations WHERE reporter_tabel = ?", (context.user_data['tabel_number'],))
        user_violations = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM violations")
        total_violations = cursor.fetchone()[0]
        conn.close()
        
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {total_violations}\n–í–∞–º–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {user_violations}"
        await update.message.reply_text(stats_text)
        return MAIN_MENU

async def siz_season(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return await back_to_main(update, context)
    
    context.user_data['season'] = text
    siz_items = get_siz_items(text)
    
    keyboard = []
    for item, quantity in siz_items:
        keyboard.append([f"{item} ({quantity} —à—Ç)"])

    keyboard.append(['‚Ü©Ô∏è –ù–∞–∑–∞–¥'])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –°–ò–ó –¥–ª—è {text} —Å–µ–∑–æ–Ω–∞:", reply_markup=reply_markup)
    return SIZ_SELECTION

async def siz_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return await back_to_main(update, context)
    
    siz_name = text.split(' (')[0]
    
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO siz_orders (user_id, tabel_number, season, siz_item, quantity) VALUES (?, ?, ?, ?, ?)",
                  (update.effective_user.id, context.user_data['tabel_number'], context.user_data['season'], siz_name, 1))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω: {siz_name} ({context.user_data['season']})")
    return await back_to_main(update, context)

async def violation_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞':
        return await back_to_main(update, context)
    
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO violations (reporter_tabel, violation_type, description) VALUES (?, ?, ?)",
                  (context.user_data['tabel_number'], "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", text))
    conn.commit()
    conn.close()
    
    await update.message.reply_text("‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")
    return await back_to_main(update, context)

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['üõ°Ô∏è –ó–∞–∫–∞–∑–∞—Ç—å –°–ò–ó'], ['üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏'], ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    return MAIN_MENU

def run_bot():
    init_database()
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            TABEL_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_tabel_number)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            SIZ_SEASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, siz_season)],
            SIZ_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, siz_selection)],
            VIOLATION_REPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, violation_report)],
        },
        fallbacks=[]
    )
    
    application.add_handler(conv_handler)
    print("ü§ñ –ë–æ—Ç –°–ò–ó –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    run_bot()
